{"version":3,"file":"static/webpack/static/development/pages/index.js.f2cd10eb1992c5c586db.hot-update.js","sources":["webpack:///./src/components/Modal.js"],"sourcesContent":["import styled, {css} from 'styled-components';\nimport {npcColumns} from '../commons/list';\nimport NpcMapData from '../../static/datas/npcmap.json';\nimport NpcData from '../../static/datas/npc.json';\nimport {getDataById} from '../commons/query';\nimport {npcMapColumns} from '../commons/list';\n\nimport NpcMapTable from '../pages/components/NpcMapTable';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport {red, blue, brown, green} from '@material-ui/core/colors';\n\nconst columnsKey = Object.keys(npcColumns);\nconst npcMapColumnsKey = Object.keys(npcMapColumns);\n\nexport default (props) => {\n  const classes = useStyles();\n  const {id, onClose} = props;\n  \n  if(!id) return null;\n\n  npcMapColumns.id_npc.link = false;\n\n  const npc = getDataById(id, {data: NpcData});\n  const npcMap = getDataById(id, {data: NpcMapData}, 'id_npc');\n\n  return (\n\t<Wrapper bg={props.bg || 'white'} borderRadius=\"8px\" borderColor=\"rgba(0,0,0,.1)\" border=\"1px solid\">\n    <Button onClick={onClose}>Close</Button>\n    <Column>\n      <H4>Npc Info</H4>\n\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columnsKey.map((item, key) => (\n                <TableCell key={key}>{npcColumns[item].label}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!npc.length ? <div>...</div>\n                :\n                (npc.map((item, key) => (\n                  <TableRow  className={classes['element' + item.element]} key={key} borderTop=\"1px solid\" borderColor=\"gray2\">\n                    {columnsKey.map((object, key2) => (\n                      <TableCell key={key2}>{item[object]}</TableCell>\n                    ))}\n                  </TableRow>\n                )))\n\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      \n      <H4>Map Locations:</H4>\n      <NpcMapTable columns={npcMapColumns}\n\t\t\t\t\t\t\t\tcolumnsKey={npcMapColumnsKey}\n\t\t\t\t\t\t\t\titems={npcMap}\n\t\t\t\t\t\t\t\t/>\n    </Column>\n\t</Wrapper>\n)}\n\nconst Wrapper = styled.div`\n  left: 5%;\n  padding: 20px;\n  position: fixed;\n  top: 0;\n  height: 100%;\n  width: 90%;\n  z-index: 99999999;\n  background: #222;\n  border: 1px solid #eee;\n  overflow: auto;\n  color: #fff;\n`\n\nconst Column = styled.div`\n`\n\nconst H4 = styled.h4`\n  margin: 10px 0;\n  border-top: 1px solid #eee;\n  padding-top: 20px;\n`\n\n\nconst bgRed = red[900];\nconst bgGreen = green[900];\nconst bgBlue = blue[900];\nconst bgBrown = brown[900];\n\nconst useStyles = makeStyles({\n  container: {\n    maxHeight: 'calc(100vh - 170px)',\n\t},\n\tpagination: {\n\t\tjustifyContent: 'flex-end',\n\t\tdisplay: 'flex'\n\t},\n\telement1: {\n\t\tbackground: bgBrown\n\t},\n\telement2: {\n\t\tbackground: bgBlue\n\t},\n\telement3: {\n\t\tbackground: bgRed\n\t},\n\telement4: {\n\t\tbackground: bgGreen\n\t}\n});"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAAA;AAIA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAjBA;;;;A","sourceRoot":""}