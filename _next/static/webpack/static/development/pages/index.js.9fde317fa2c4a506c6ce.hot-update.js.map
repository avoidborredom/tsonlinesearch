{"version":3,"file":"static/webpack/static/development/pages/index.js.9fde317fa2c4a506c6ce.hot-update.js","sources":["webpack:///./src/pages/components/NpcMapTable.js"],"sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {red, blue, brown, green} from '@material-ui/core/colors';\n\nimport Modal from '../../components/Modal';\n\nexport default (props) => {\n  const {columns, columnSort, onSort, columnsKey, items} = props;\n  const classes = useStyles();\n  const [modalDisplay, showModal] = useState(false);\n  const [miniModalDisplay, showMiniModal] = useState(false);\n  const [mapImage, setMapImage] = useState(false);\n  const [modalInfo, setModalInfo] = useState('');\n  \n  const processLink = (processData, object) => {\n\t\tif(object == 'id_npc'){\n\t\t\tshowModal(true);\n\t\t\tsetModalInfo(processData[object]);\n    }\n    else if(object == 'id_map'){\n      let mapId = processData[object];\n\n      showMiniModal(true);\n\t\t\tsetMapImage(processData[object]);\n    }\n\t}\n\n\tconst onClose = () => {\n\t\tshowModal(false);\n  }\n\n  const SortColumn = ({item}) => {\n    if(onSort)\n      return (\n        <Sort onClick={() => onSort(item)}>\n          {columns[item].label} \n          {columnSort[item].reverse ? \"⬇\" : \"⬆︎\"}\n        </Sort>\n    )\n\n    return (\n      <>\n        {columns[item].label}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead> \n            <TableRow>\n              {columnsKey.map((item, key) => (\n                <TableCell key={key}>\n                  <SortColumn item={item} />\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!items.length ? <TableRow><TableCell colSpan={columnsKey.length}>...</TableCell></TableRow>\n              :\n              (items.map((item, key) => (\n                <TableRow className={classes['element' + item['element']]} hover key={key} tabIndex={-1} >\n                  {columnsKey.map((object, key2) => (\n                    <TableCell key={key2}>\n                      {(columns[object].link) ? <Link onClick={() => processLink(item, object)}>{item[object]}</Link>\n                      : item[object]\n                      }\n                    </TableCell>\n                  ))}\n                </TableRow>\n              )))\n\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {modalDisplay && <Modal title={modalInfo.title} id={modalInfo} onClose={onClose} />}\n      {modalDisplay && <Modal title={modalInfo.title} id={modalInfo} onClose={onClose} />}\n    </>\n  )\n}\n\nconst Link = styled.a`\n\tcursor: pointer;\n\tcolor: #fff;\n\ttext-decoration: underline;\n`\n\nconst Sort = styled.span`\n\tdisplay: block;\n\tcursor: pointer;\n`\n\nconst bgRed = red[900];\nconst bgGreen = green[900];\nconst bgBlue = blue[900];\nconst bgBrown = brown[900];\n\nconst useStyles = makeStyles({\n  container: {\n    maxHeight: 'calc(100vh - 170px)',\n\t},\n\tpagination: {\n\t\tjustifyContent: 'flex-end',\n\t\tdisplay: 'flex'\n\t},\n\telement1: {\n\t\tbackground: bgBrown\n\t},\n\telement2: {\n\t\tbackground: bgBlue\n\t},\n\telement3: {\n\t\tbackground: bgRed\n\t},\n\telement4: {\n\t\tbackground: bgGreen\n\t}\n});"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAjBA;;;;A","sourceRoot":""}