{"version":3,"file":"static/webpack/static/development/pages/index.js.03817d174c41aab7d16f.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","webpack:///./src/components/Modal.js","webpack:///./src/pages/components/NpcMapTable.js"],"sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import styled, {css} from 'styled-components';\nimport {npcColumns} from '../commons/list';\nimport NpcMapData from '../../static/datas/npcmap.json';\nimport NpcData from '../../static/datas/npc.json';\nimport {getDataById} from '../commons/query';\nimport {npcMapColumns} from '../commons/list';\n\nimport NpcMapTable from '../pages/components/NpcMapTable';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport {red, blue, brown, green} from '@material-ui/core/colors';\n\nconst columnsKey = Object.keys(npcColumns);\nconst npcMapColumnsKey = Object.keys(npcMapColumns);\n\nexport default (props) => {\n  const classes = useStyles();\n  const {id, onClose} = props;\n \n  if(!id) return null;\n\n  const npc = getDataById(id, {data: NpcData});\n  const npcMap = getDataById(id, {data: NpcMapData}, 'id_npc');\n\n  return (\n\t<Wrapper bg={props.bg || 'white'} borderRadius=\"8px\" borderColor=\"rgba(0,0,0,.1)\" border=\"1px solid\">\n    <Button c onClick={onClose}>Close</Button>\n    <Column>\n      <H4>Npc Info</H4>\n\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columnsKey.map((item, key) => (\n                <TableCell key={key}>{npcColumns[item].label}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!npc.length ? <div>...</div>\n                :\n                (npc.map((item, key) => (\n                  <TableRow  className={classes['element' + item.element]} key={key} borderTop=\"1px solid\" borderColor=\"gray2\">\n                    {columnsKey.map((object, key2) => (\n                      <TableCell key={key2}>{item[object]}</TableCell>\n                    ))}\n                  </TableRow>\n                )))\n\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      \n      <H4>Map Locations:</H4>\n      <NpcTable columns={npcMapColumns}\n\t\t\t\t\t\t\t\t// columnSort={columnSort}\n\t\t\t\t\t\t\t\t// onSort={onSort}\n\t\t\t\t\t\t\t\tcolumnsKey={npcMapColumnsKey}\n\t\t\t\t\t\t\t\titems={npcMap}\n\t\t\t\t\t\t\t\t/>\n      {/* <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {npcMapColumnsKey.map((item, key) => (\n                <TableCell key={key}>{npcMapColumns[item].label}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!npcMap.length ? <div>...</div>\n                :\n                (npcMap.map((item, key) => (\n                  <TableRow key={key} borderTop=\"1px solid\" borderColor=\"gray2\">\n                    {npcMapColumnsKey.map((object, key2) => (\n                      <TableCell key={key2}>{item[object]}</TableCell>\n                    ))}\n                  </TableRow>\n                )))\n\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer> */}\n    </Column>\n\t</Wrapper>\n)}\n\nconst Wrapper = styled.div`\n  left: 5%;\n  padding: 20px;\n  position: fixed;\n  top: 0;\n  height: 100%;\n  width: 90%;\n  z-index: 99999999;\n  background: #222;\n  border: 1px solid #eee;\n  overflow: auto;\n  color: #fff;\n`\n\nconst Column = styled.div`\n`\n\nconst H4 = styled.h4`\n  margin: 10px 0;\n  border-top: 1px solid #eee;\n  padding-top: 20px;\n`\n\n\nconst bgRed = red[900];\nconst bgGreen = green[900];\nconst bgBlue = blue[900];\nconst bgBrown = brown[900];\n\nconst useStyles = makeStyles({\n  container: {\n    maxHeight: 'calc(100vh - 170px)',\n\t},\n\tpagination: {\n\t\tjustifyContent: 'flex-end',\n\t\tdisplay: 'flex'\n\t},\n\telement1: {\n\t\tbackground: bgBrown\n\t},\n\telement2: {\n\t\tbackground: bgBlue\n\t},\n\telement3: {\n\t\tbackground: bgRed\n\t},\n\telement4: {\n\t\tbackground: bgGreen\n\t}\n});","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {red, blue, brown, green} from '@material-ui/core/colors';\n\nimport Modal from '../../components/Modal';\n\nexport default (props) => {\n  const {columns, columnSort, onSort, columnsKey, items} = props;\n  const classes = useStyles();\n  const [modalDisplay, showModal] = useState(false);\n  const [modalInfo, setModalInfo] = useState('');\n  \n  const processLink = (processData, object) => {\n\t\tif(object == 'id_npc'){\n\t\t\tshowModal(true);\n\t\t\tsetModalInfo(processData[object]);\n\t\t}\n\t}\n\t\n\tconst onClose = () => {\n\t\tshowModal(false);\n  }\n  \n  const SortColumn = ({item}) => {\n    if(onSort)\n      return (\n        <Sort onClick={() => onSort(item)}>\n          {columns[item].label} \n          {columnSort[item].reverse ? \"⬇\" : \"⬆︎\"}\n        </Sort>\n    )\n\n    return (\n      <>\n        {columns[item].label}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead> \n            <TableRow>\n              {columnsKey.map((item, key) => (\n                <TableCell key={key}>\n                  <SortColumn item={item} />\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!items.data.length ? <TableRow><TableCell colSpan={columnsKey.length}>...</TableCell></TableRow>\n              :\n              (items.data.map((item, key) => (\n                <TableRow className={classes['element' + item['element']]} hover key={key} tabIndex={-1} >\n                  {columnsKey.map((object, key2) => (\n                    <TableCell key={key2}>\n                      {(columns[object].link) ? <Link onClick={() => processLink(item, object)}>{item[object]}</Link>\n                      : item[object]\n                      }\n                    </TableCell>\n                  ))}\n                </TableRow>\n              )))\n\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {modalDisplay && <Modal title={modalInfo.title} id={modalInfo} onClose={onClose} />}\n    </>\n  )\n}\n\nconst Link = styled.a`\n\tcursor: pointer;\n\tcolor: #fff;\n\ttext-decoration: underline;\n`\n\nconst Sort = styled.span`\n\tdisplay: block;\n\tcursor: pointer;\n`\n\nconst bgRed = red[900];\nconst bgGreen = green[900];\nconst bgBlue = blue[900];\nconst bgBrown = brown[900];\n\nconst useStyles = makeStyles({\n  container: {\n    maxHeight: 'calc(100vh - 170px)',\n\t},\n\tpagination: {\n\t\tjustifyContent: 'flex-end',\n\t\tdisplay: 'flex'\n\t},\n\telement1: {\n\t\tbackground: bgBrown\n\t},\n\telement2: {\n\t\tbackground: bgBlue\n\t},\n\telement3: {\n\t\tbackground: bgRed\n\t},\n\telement4: {\n\t\tbackground: bgGreen\n\t}\n});"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAAA;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AAEA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAMA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAjBA;;;;A","sourceRoot":""}